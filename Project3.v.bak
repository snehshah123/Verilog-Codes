module convolution (
  input [3:0] x [0:3], // Input signal x
  input [3:0] h [0:3], // Input signal h
  output [7:0] y [0:7] // Output signal y
);

  assign y[0] = x[0] * h[0]; // Convolution for n = 0

  // Convolution for n = 1
  assign y[1] = x[0] * h[1] + x[1] * h[0];

  // Convolution for n = 2
  assign y[2] = x[0] * h[2] + x[1] * h[1] + x[2] * h[0];

  // Convolution for n = 3
  assign y[3] = x[0] * h[3] + x[1] * h[2] + x[2] * h[1] + x[3] * h[0];

  // Convolution for n = 4
  assign y[4] = x[1] * h[3] + x[2] * h[2] + x[3] * h[1];

  // Convolution for n = 5
  assign y[5] = x[2] * h[3] + x[3] * h[2];

  // Convolution for n = 6
  assign y[6] = x[3] * h[3];

  // The remaining elements of y are 0

endmodule

module convolution_tb;
  reg [3:0] x [0:3]; // Input signal x
  reg [3:0] h [0:3]; // Input signal h
  wire [7:0] y [0:7]; // Output signal y

  // Initialize input signals
  initial begin
    x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
    h[0] = 2; h[1] = 3; h[2] = 4; h[3] = 5;

    // Wait for some time to let the simulation settle
    #10;
    
    // Display the convolution sum results
    $display("Convolution Sum:");
    for (int i = 0; i < 8; i = i + 1) begin
      $display("y[%0d] = %0d", i, y[i]);
    end

    // Finish the simulation
    $finish;
  end

  // Instantiate the convolution module
  convolution u1 (
    .x(x),
    .h(h),
    .y(y)
  );

endmodule

// Simulate the testbench
initial begin
  $dumpfile("convolution.vcd");
  $dumpvars(0, convolution_tb);
  $display("Starting simulation...");
  $monitor("x[0] = %0d, x[1] = %0d, x[2] = %0d, x[3] = %0d, h[0] = %0d, h[1] = %0d, h[2] = %0d, h[3] = %0d", x[0], x[1], x[2], x[3], h[0], h[1], h[2], h[3]);
  $display("Convolution Sum:");
  $monitor("y[0] = %0d, y[1] = %0d, y[2] = %0d, y[3] = %0d, y[4] = %0d, y[5] = %0d, y[6] = %0d, y[7] = %0d", y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7]);
  $finish;
end

endmodule
